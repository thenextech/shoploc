name: CI/CD Pipeline

on:
  push:
    branches:
      - ci-cd-test
  pull_request: 
    branches:
      - dev
      - main

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
          wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
          unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip

      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Build with Maven
        run: mvn package

      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: target/

      - name: Run unit tests
        run: mvn test

  sonarqube:
    name: SonarQube analyze
    runs-on: ubuntu-latest
      
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=thenextech_shoploc-back-end

  deploy:
    name: Deploying to Kubernetes
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
    
      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
          wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
          unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip

      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}


      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: target
          path: target/
          
      - name: Show directory
        run: ls
    
      - name: Configure KUBECONFIG
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG_PROD }} | base64 --decode > ${HOME}/.kube/config
          cat ${HOME}/.kube/config
      
      - name: Configure KUBECONFIG
        if: github.ref == 'refs/heads/ci-cd-test'
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG_DEV }} | base64 --decode > ${HOME}/.kube/config
          cat ${HOME}/.kube/config
    
      - name: Cat KUBECONFIG
        run: cat ${HOME}/.kube/config
      
      - name: Generate Image Tag
        run: echo "DOCKER_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      
      - name: Build Docker Image
        run: docker build -f Dockerfile -t nextechsolutions/shoploc-backend:$DOCKER_TAG .

      - name: Push Docker Image to Registry
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push nextechsolutions/shoploc-backend:$DOCKER_TAG

      - name: Substitute Docker Tag in Kubernetes Deployment
        run: sed -i "s/TAG_TO_REPLACE/$DOCKER_TAG/" kubernetes/dev-deploy.yaml

      - name: Deploy Kubernetes
        if: github.ref == 'refs/heads/ci-cd-test'
        run: kubectl apply --kubeconfig ${HOME}/.kube/config -f kubernetes/dev-deploy.yaml --request-timeout=5m
